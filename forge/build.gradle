import net.minecraftforge.gradle.common.tasks.SignJar
import org.apache.commons.io.FilenameUtils

plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

// Fixes an issue where net.sf.jopt-simple:jopt-simple cannot be resolved
configurations.configureEach {
    resolutionStrategy {
        it.force 'net.sf.jopt-simple:jopt-simple:5.0.4'
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    reobf = false
    copyIdeResources = true

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers = at
    }

    runs {
        configureEach {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'forge.logging.markers', 'REGISTRIES,SCAN,LOADING'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                catalogue {
                    source sourceSets.main
                }
            }
        }
        client {
            taskName "Client"
            property 'forge.enabledGameTestNamespaces', mod_id
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Temp hack fix in Forge.
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

tasks.register('signJar', SignJar) {
    dependsOn jar
    onlyIf {
        hasProperty('keyStore') || System.getenv("KEYSTORE")
    }
    keyStore = findProperty('keyStore') ?: System.getenv("KEYSTORE")
    alias = findProperty('keyStoreAlias') ?: System.getenv("KEYSTORE_ALIAS")
    storePass = findProperty('keyStorePass') ?: System.getenv("KEYSTORE_PASS")
    inputFile = jar.archiveFile
    def name = FilenameUtils.removeExtension(jar.archiveFile.get().getAsFile().getName());
    outputFile = layout.buildDirectory.file("libs/%s-signed.jar".formatted(name));
}

jar.finalizedBy 'signJar'

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
